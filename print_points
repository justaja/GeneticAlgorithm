import numpy as np
import matplotlib.pyplot as plt
import random as random
from random import randint
import math as math
import copy
import self as self

from matplotlib.patches import Circle

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y


class Main:
    def __init__(self):
        self.__redPoints = []
        self.__bluePoints = []
        self.__plusPoints = 0
        self.__minusPoints = 0
        self.__population = []
        self.__coefficients = []
        self.__plusError = 0
        self.__minusError = 0
        self.__i = 0


    def calculateGeneration(self, numberOfGenerations):
        print("MAAAAAAINNNNNN", self.__population)
        for i in range(numberOfGenerations):
            newPopulation = []
            while len(main.__population) > len(newPopulation):
                chosenOnes = main.performSelection(3)
                print("%s, SELECTION", chosenOnes)
                randomInt = randint(0, 2)
                if randomInt == 0:
                    newChromosome = self.performCrossOver(chosenOnes)
                    print("%s AFTER CROSSOVER", newChromosome)
                    newPopulation.append(newChromosome)
                if randomInt == 1:
                    newChromosome = main.performMutation(chosenOnes)
                    print("%s AFTER MUTATION", newChromosome)
                    newPopulation.append(newChromosome)
                print("NEW POPULATION AAAAAAAAAAAAAAAAAAA", newPopulation)
            print("%s NEW POPULATION", newPopulation)
            print("%s MAIN POPULATION", self.__population)
            self.__i = 0
            main.__population = copy.deepcopy(newPopulation)


    def func(self, coefficients, x):
        power = np.polyval(coefficients, x)
        return power


    def print_func(self, func, coefficients):
        x = np.linspace(5, 3, 200)
        result = []
        for x_val in x:
            value = func(coefficients, x_val)
            result.append(value)
        return plt.plot(result)

    def generate_points(self, origin, radius, amount, color):
        circle = Circle(origin, radius)
        points = []
        for i in range(amount):
            p = random.random() * 2 * math.pi
            r = circle.radius * math.sqrt(random.random())
            x = math.cos(p) * r + origin[0]
            y = math.sin(p) * r + origin[1]
            plt.scatter(x, y, c=color)
            points.append(Point(x, y))
        return points

    def generateGenes(self, degree):
        self.__coefficients = np.random.random((degree + 1)) * 6 - 3
        self.__coefficients = np.ndarray.tolist(self.__coefficients)
        self.__population.append(self.__coefficients)
        self.__coefficients = []


    def checkFunction(self, polynomial):
        errors = 0
        self.__plusError = 0
        self.__minusError = 0
        for i in range(len(self.__redPoints)):
            point = self.__redPoints[i]
            value = self.func(polynomial, point.x)
            if point.y < value:
                self.__plusPoints += 1
            else:
                self.__plusError +=1
        for i in range(len(self.__bluePoints)):
            point2 = self.__bluePoints[i]
            value2 = self.func(polynomial, point2.x)
            if point2.y < value2:
                self.__minusPoints += 1
            else:
                self.__minusError += 1
        errors = self.__plusError + self.__minusError
        return self.__plusError + self.__minusError


    def performSelection(self, numberOfPopulation):
        selectionResult = []
        self.__i = 0
        for i in range ((len(self.__population)) // 2):
            print("PETLA")
            selectionResult.append(self.tournamentOfTwoChromosome(self.__population[self.__i], self.__population[len(self.__population) - self.__i  - 1]))
            self.__i += 1
            if i == 1:
                if selectionResult[0] == selectionResult[1]:
                    selectionResult = []
                    i = 0
                    continue

        return selectionResult

    def tournamentOfTwoChromosome(self, chrom1, chrom2):
        if self.checkFunction(chrom1) < self.checkFunction(chrom2):
            return chrom1
        else:
            return chrom2


    def performMutation(self, chromosomes):
        newChromosome = copy.deepcopy(chromosomes[0])
        newChromosome[0] = 2
        return newChromosome


    def performCrossOver(self, chromosomes):
        crossOverProbability = 0.9
        # if randint(0,1) < crossOverProbability:
        randomChromosome = chromosomes[0]
        randomChromosome2 = chromosomes[1]
        lenght = len(randomChromosome)
        i = round(lenght/2)
        newRandomChromosome = randomChromosome[:i] + randomChromosome2[i:]
        newRandomChromosome2 = randomChromosome2[:i] + randomChromosome[i:]
        return(newRandomChromosome)


    def plot_canva(self):
        plt.ion()

        self.__redPoints = self.generate_points((50, 50), 60, 30, 'r')
        self.__bluePoints = self.generate_points((100, 100), 30, 30, 'b')

        last_plot = None
        if last_plot is not None:
            last_plot.pop(0)
        last_plot = self.print_func(self.func, [4,0,4,0])
        plt.show()

        # plt.plot(positive[0], positive[1], 'g+', negative[0], negative[1], 'r_',
        #          np.arange(-1, 1, 0.01), np.polyval(best_genotype[0], np.arange(-1, 1, 0.01)))
        # plt.show()



if __name__ == "__main__":
    main = Main()

    for i in range (5):
        main.generateGenes(3)
    main.plot_canva()
    main.calculateGeneration(2)


